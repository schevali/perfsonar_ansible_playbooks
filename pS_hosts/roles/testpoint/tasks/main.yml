---
# plays for testpoints

#- name: restrict root ssh

# BASTION
#- name: adduser local users
#  local_action:
#  user:
#    name: "{{ item['uid'] }}"
#    generate_ssh_key: yes
#  with_items: "{{ users }}"

# VARDEF: bastion_hosts
- name: hosts.allow
  lineinfile:
    path: /etc/hosts.allow
    line: "sshd: {{ item }}"
  with_items: "{{ bastion_hosts }}"
  when: bastion_hosts is defined

- name: hosts.deny sshd all
  lineinfile:
    path: /etc/hosts.deny
    line: "sshd: all"
  when: bastion_hosts is defined

- name: group pssudo
  group:
    name: pssudo
    state: present

# VARDEF: users
- name: adduser pssudo users
  user:
    name: "{{ item['uid'] }}"
    groups: pssudo
  with_items: "{{ users }}"

- name: authkey users
  authorized_key:
    user: "{{item.uid}}"
    key: "{{ lookup('file', '/home/{{ item.uid }}/.ssh/id_rsa.pub')}}"
  with_items: "{{ users }}"
  ignore_errors: yes

# VARDEF: nameservers
- name: resolv.conf nameservers
  lineinfile:
    path: /etc/resolv.conf
    line: "nameserver {{ item }}"
  with_items: "{{ nameservers }}"
  when: nameservers is defined

- name: yum epel-release
  yum: name=epel-release state=latest

- name: yum repo
  yum: name=http://software.internet2.edu/rpms/el7/x86_64/main/RPMS/perfSONAR-repo-0.8-1.noarch.rpm state=present

- name: yum clean all
  command: yum clean all

- name: yum install toolkit
  yum: name=perfsonar-toolkit state=latest

- name: check for local ntp.conf
  local_action: stat path=roles/testpoint/files/ntp.conf
  register: stat_ntp_conf

- name: copy ntp.conf
  copy:
    src: ../files/ntp.conf
    dest: /etc/ntp.conf
    force: no
  when: stat_ntp_conf.stat.exists == true
  notify:
    - restart ntp

- name: perfSONAR ntp script
  command: echo Hello
  when: stat_ntp_conf.stat.exists == false
#  notify:
#    - restart ntp

- name: Make sure we can use htpasswd module
  yum: name=python-passlib state=installed

# VARDEF: web_passwd
- name: htpasswd for pswebadmin
  htpasswd:
    path: /etc/perfsonar/toolkit/psadmin.htpasswd
    name: pswebadmin
    password: "{{ web_passwd }}"
    state: present

- name: group psadmin
  group:
    name: psadmin
    state: present

- name: adduser pswebadmin
  user:
    name: pswebadmin
    group: psadmin
    shell: /bin/false

# VARDEF: interfaces
- name: interface config
  command: /usr/lib/perfsonar/scripts/mod_interface_route --command add --device "{{ item['name'] }}" --ipv4_gateway "{{ item['ipv4_gateway'] }}"
  with_items: "{{ interfaces }}"
  when: interfaces is defined

# VARDEF: troubleshoot
- name: troubleshoot pscheduler
  command: pscheduler troubleshoot "{{ item['host'] }}"
  with_items: "{{ troubleshoot }}"
  when: troubleshoot is defined

# SYSTUNING
# FIREWALL SCRIPTS
# SERVICE WATCHER
# SERVICE STATUS
# SERVICE START
